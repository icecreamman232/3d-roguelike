//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5f8aa6d5-1851-490e-b2bb-c66318cef6b8"",
            ""actions"": [
                {
                    ""name"": ""Ability_1"",
                    ""type"": ""Button"",
                    ""id"": ""b801431d-1290-436c-ae82-479e65e93b68"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability_2"",
                    ""type"": ""Button"",
                    ""id"": ""679e675f-20d0-4b86-9b3a-c2fb84b47865"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability_3"",
                    ""type"": ""Button"",
                    ""id"": ""803e60a1-2f10-48ae-af43-319c051120ce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability_4"",
                    ""type"": ""Button"",
                    ""id"": ""383d0fc2-30dd-4f9d-9992-61a8e53a4b9c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8d524e3-50c6-42c1-9dff-5f3c2f5da66d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef64f01b-f00f-4ca0-9a58-f97ec7a29a5a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1286425c-2055-4b24-bb58-074accf61545"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb8d0361-988f-4cee-bb65-415ea550beec"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Ability_1 = m_Player.FindAction("Ability_1", throwIfNotFound: true);
        m_Player_Ability_2 = m_Player.FindAction("Ability_2", throwIfNotFound: true);
        m_Player_Ability_3 = m_Player.FindAction("Ability_3", throwIfNotFound: true);
        m_Player_Ability_4 = m_Player.FindAction("Ability_4", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputAction.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Ability_1;
    private readonly InputAction m_Player_Ability_2;
    private readonly InputAction m_Player_Ability_3;
    private readonly InputAction m_Player_Ability_4;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Ability_1 => m_Wrapper.m_Player_Ability_1;
        public InputAction @Ability_2 => m_Wrapper.m_Player_Ability_2;
        public InputAction @Ability_3 => m_Wrapper.m_Player_Ability_3;
        public InputAction @Ability_4 => m_Wrapper.m_Player_Ability_4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Ability_1.started += instance.OnAbility_1;
            @Ability_1.performed += instance.OnAbility_1;
            @Ability_1.canceled += instance.OnAbility_1;
            @Ability_2.started += instance.OnAbility_2;
            @Ability_2.performed += instance.OnAbility_2;
            @Ability_2.canceled += instance.OnAbility_2;
            @Ability_3.started += instance.OnAbility_3;
            @Ability_3.performed += instance.OnAbility_3;
            @Ability_3.canceled += instance.OnAbility_3;
            @Ability_4.started += instance.OnAbility_4;
            @Ability_4.performed += instance.OnAbility_4;
            @Ability_4.canceled += instance.OnAbility_4;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Ability_1.started -= instance.OnAbility_1;
            @Ability_1.performed -= instance.OnAbility_1;
            @Ability_1.canceled -= instance.OnAbility_1;
            @Ability_2.started -= instance.OnAbility_2;
            @Ability_2.performed -= instance.OnAbility_2;
            @Ability_2.canceled -= instance.OnAbility_2;
            @Ability_3.started -= instance.OnAbility_3;
            @Ability_3.performed -= instance.OnAbility_3;
            @Ability_3.canceled -= instance.OnAbility_3;
            @Ability_4.started -= instance.OnAbility_4;
            @Ability_4.performed -= instance.OnAbility_4;
            @Ability_4.canceled -= instance.OnAbility_4;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnAbility_1(InputAction.CallbackContext context);
        void OnAbility_2(InputAction.CallbackContext context);
        void OnAbility_3(InputAction.CallbackContext context);
        void OnAbility_4(InputAction.CallbackContext context);
    }
}
